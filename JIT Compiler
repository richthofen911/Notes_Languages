::原理：      把解释型程序集转换到原生代码
::前提条件：  代码必须是类型安全（类型安全代码指访问被授权可以访问的内存位置。例如，类型安全代码不能从其他对象
                                  的私有字段读取值。它只从定义完善的允许方式访问类型才能读取。类型安全的代码
                                  具备定义良好的数据类型。）
              否则将抛出一个异常，JIT过程结束。
                                  
::概述
  原始情况是，javac将程序源代码编译，转换成java字节码，JVM通过解释字节码将其翻译成对应的机器指令，逐条读入，
  先后次序依序执行，由于一个Java指令可能被转译成十几或数十几个对等的微处理器指令，很显然这种模式执行的速度
  相当缓慢。
  
  针对这个问题，业界首先开发出JIT（just in time）编译器。在运行时JIT会把翻译过的机器码保存起来，已备下次使用，
  每遇到一个新的.class文件，JVM读入文件解释后，将其发给JIT编译器，JIT编译器就会针对这个类进行编译作业。
  经过编译后的程序，被优化成相当精简的二进制机器码，这种程序的执行速度相当快。花费少许的编译时间来节省稍后相当
  长的执行时间，JIT这种设计的确增加不少效率，但是它并未达到最顶尖的效能，因为某些极少执行到的Java指令在编译时
  所额外花费的时间可能比转译器在执行时的时间还长，针对这些指令而言整体花费的时间并没有减少。
  
  基于对JIT的经验，业界发展出动态编译器（dynamic compiler），动态编译器仅针对较常被执行的程序码进行编译，其余
  部分仍使用转译程序来执行。也就是说，动态编译器会研判是否要编译每个类。动态编译器拥有两项利器：一是转译器，
  另一则是JIT，它透过智慧机制针对每个类进行分析，然后决定使用这两种利器的哪一种来达到最佳化的效果。动态编译器
  针对程序的特性或者是让程序执行几个循环，再根据结果决定是否编译这段程序码。这个决定不见得绝对正确，但从统计
  数字来看，这个判断的机制正确的机会相当高。事实上，动态编译器会根据「历史资料」做决策，所以程序执行的时间愈长
  判断正确的机率就愈高。以整个结果来看，动态编译器产生的程序码执行的速度超越以前的JIT技术，平均速度可提高至50%
  
  
