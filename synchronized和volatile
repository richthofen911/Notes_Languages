::synchronized的详细使用说明
  http://blog.csdn.net/luoweifu/article/details/46613015

http://www.cnblogs.com/dolphin0520/p/3920373.html
在Java 5Java 5之前，'volatile'是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在Java 5之后，它
才得以重获生机。volatile关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于volatile关键字是与Java
的内存模型有关的，因此在讲述volatile关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了volatile关键字的
实现原理，最后给出了几个使用volatile关键字的场景。
::内存模型(共享内存模型)
  大家都知道，计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序
  运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向
  内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大
  降低指令执行的速度。因此在CPU里面就有了高速缓存。也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU
  的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的
  数据刷新到主存当中。例如
    
    i = i + 1;
    
  当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速缓存当中，然后CPU执行指令对i进行加1操作，然后将
  数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中。
  这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核CPU中，每条线程可能运行于不同的CPU
  中，因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）
  此处以多核CPU为例。
　　假如同时有2个线程执行这段代码，假如初始时i的值为0，那么我们希望两个线程执行完之后i的值变为2。但事实是，可能存在
　　下面一种情况：
　　  初始时，两个线程分别读取i的值存入各自所在的CPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到
　　  内存。此时线程2的高速缓存当中i的值还是0，进行加1操作之后，i的值为1，然后线程2把i的值写入内存。最终结果i的值是
　　  1，而不是2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。
　为了解决缓存不一致性问题，通常来说有以下2种解决方法：
　　1）通过在总线加LOCK锁的方式
　　2）通过缓存一致性协议　  
　这2种方式都是硬件层面上提供的方式。
　但是总线加LOCK锁的方式，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。
　所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。
　它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他
　CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么
　它就会从内存重新读取。

::并发编程中的三个概念
  1)原子性
    即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
    一个很经典的例子是银行账户转账问题
    
  2)可见性
    指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
    
  3)有序性
    即程序执行的顺序按照代码的先后顺序执行。例子:
      int i = 0;              
      boolean flag = false;
      i = 1;                //语句1  
      flag = true;          //语句2
    上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1
    是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能
    会发生指令重排序（Instruction Reorder）。  
    什么是指令重排序?: 一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行
    先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。那么它靠什么保证的呢？:
    处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么
    处理器会保证Instruction 1会在Instruction 2之前执行。
    虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？ 例子：
      //线程1:
      context = loadContext();   //语句1
      inited = true;             //语句2
       
      //线程2:
      while(!inited ){
        sleep()
      }
      doSomethingwithconfig(context);
    
    上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，
    而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时
    context并没有被初始化，就会导致程序出错。  
    
  从上面可以看出, 要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致
  程序运行不正确。
  
::Java的内存模型
  在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，
  以实现让Java程序在各种平台下都能达到一致的内存访问效果。那么Java内存模型规定了哪些东西呢，它定义了程序中变量的
  访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用
  处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在java内存模型中，也会
  存在缓存一致性问题和指令重排序的问题。
  Java内存模型规定所有的变量都是存在主存当中(类似于前面说的物理内存)，每个线程都有自己的工作内存(类似于前面的高速
  缓存)。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作，必须先在自己的工作线程中对完成计算
  然后再写入主存当中。并且每个线程不能访问其他线程的工作内存。
  Java语言本身对原子性、可见性以及有序性提供了哪些保证？
    原子性：在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，
      要么不执行。上面一句话虽然看起来简单，但是理解起来并不是那么容易。例子：
        请分析以下哪些操作是原子性操作：
          x = 10;         //语句1
          y = x;         //语句2
          x++;           //语句3
          x = x + 1;     //语句4
        
        咋一看可能会觉得上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是。
  　　  语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。
    　　语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 
    　　       这2个操作都是原子性操作，但是合起来就不是原子性操作了。
  　　  同样的，x++和 x = x+1包括3个操作：读取x的值，进行加1操作，写入新的值。
   　  　所以上面4个语句只有语句1的操作具备原子性。
  　　  也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作
  
  　　特别注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但在最新的JDK中，
  　　JVM已经保证对64位数据的读取和赋值也是原子性操作了  
  　　如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有
  　　一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性
  　
  　可见性：Java提供了volatile关键字来保证可见性
  　  当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取
  　  新值。而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程
  　  去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。
　　 另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步
　　 代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。
　　 
　　有序性： 在Java内存模型中允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会
　　         影响到多线程并发执行的正确性。可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。
　　         另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行
　　         同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。
　　         另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为
　　         happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们
　　         的有序性，虚拟机可以随意地对它们进行重排序。
　　         happens-before原则（先行发生原则）：
              1.程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作
              2.锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作
              3.volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作
              4.传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C
              5.线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作
              6.线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生
              7.线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、
                              Thread.isAlive()的返回值手段检测到线程已经终止执行
              8.对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始
            这8条原则摘自《深入理解Java虚拟机》
::理解volatile关键字
  volatile具备两层语义:
    1)保证不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。
    2)禁止进行指令重排序。
  例子：
    //线程1
    boolean stop = false;
    while(!stop){
        doSomething();
    }
     
    //线程2
    stop = true;
    
    这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？
    即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然
    这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。为何有可能导致无法中断线程以致死循环呢？
      在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放
      在自己的工作内存当中。那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，
      那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。
      但是用volatile修饰之后就变得不一样了：
      使用volatile关键字会强制将修改的值立即写入主存，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存
      行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效),由于线程1的工作内存中缓存变量stop的
      缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。那么线程1读取到的就是最新的正确的值。
      
  注意**: volatile只保证可见性，与原子性操作无关，所以不保证原子性
          volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性
          
  volatile的原理和实现机制
    观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀
    指令。lock前缀指令实际上相当于一个内存屏障（也叫内存栅栏），内存屏障会提供3个功能：
      1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；
         即在执行到内存屏障这句指令时，在它前面的操作已经全部完成
　　  2）它会强制将对缓存的修改操作立即写入主存
　　  3）如果是写操作，它会导致其他CPU中对应的缓存行无效。

::volatile关键字的使用场景
  synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要
  优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性
  通常来说，使用volatile必须具备以下2个条件：
    1）对变量的写操作不依赖于当前值
　　2）该变量没有包含在具有其他变量的不变式中
　简而言之，就是需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。　
