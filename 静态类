http://www.cnblogs.com/Alex--Yang/p/3386863.html

如果一个类要被声明为static的，只有一种情况，就是静态内部类。如果在外部类声明为static，程序会编译都不会过。
静态内部类和普通内部类的区别
1.静态内部类跟静态方法一样，只能访问静态的成员变量和方法，不能访问非静态的方法和属性，但是普通内部类可以访问任意外部类的成员变量和方法
 
2.静态内部类可以声明普通成员变量和方法，而普通内部类不能声明static成员变量和方法。

3.静态内部类可以单独初始化: 
    Inner i = new Outer.Inner();
  普通内部类初始化：
    Inner i = new Outer().new Inner();
    
 使用场景
  静态内部类使用场景一般是当外部类需要使用内部类，而内部类无需外部类资源，并且内部类可以单独创建的时候会考虑采用静态内部类的设计，
  典型的，用在builder, 在《Effective Java》第二章有所描述的  
  public class Outer {
      private String name;
      private int age;

      public static class Builder {
          private String name;
          private int age;

          public Builder(int age) {
              this.age = age;
          }

          public Builder withName(String name) {
              this.name = name;
              return this;
          }

          public Builder withAge(int age) {
              this.age = age;
              return this;
          }

          public Outer build() {
              return new Outer(this);
          }
      }

      private Outer(Builder b) {
          this.age = b.age;
          this.name = b.name;
      }
  }
  　
  调用
  public Outer getOuter(){
      Outer outer = new Outer.Builder(2).withName("Yang Liu").build();
      return outer;
  }
  
总结来说就是：1.如果类的构造器或静态工厂中有多个参数，设计这样类时，最好使用Builder模式，特别是当大多数参数都是可选的时候。
　           2.如果现在不能确定参数的个数，最好一开始就使用构建器即Builder模式。


  
