::工厂方法(Factory Method)模式
  工厂方法模式是简单工厂模式的衍生, 是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。核心工厂类不再
  负责产品的创建，这样核心类成为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，这样进一步抽象化的好处是使得工厂
  方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品, 解决了许多简单工厂模式的问题。首先完全实现‘开-闭 原则’
  实现了可扩展。其次更复杂的层次结构，可以应用于产品结果复杂的场合
  工厂方法模式(Factory Method pattern)是最典型的模板方法模式(Template Method pattern)应用
  http://baike.baidu.com/link?url=JahTws-MWvOarYz26Mne3COPxwIhRcJbxSc_MppZBom5m1RfIbI5QAkSWKUtPDn6kEo2vGpvjWyzEMDGe2jZsK
  
  http://blog.csdn.net/lovelion/article/details/7523392
  工厂模式的好处
  1. 两个类A和B之间的关系应该仅仅是A创建B或是A使用B，而不能两种关系都有。将对象的创建和使用分离，
     也使得系统更加符合“单一职责原则”，有利于对功能的复用和系统的维护。
  2. 此外，将对象的创建和使用分离还有一个好处：防止用来实例化一个类的数据和代码在多个类中到处都是，可以将有关创建的
     知识搬移到一个工厂类中。因为有时候我们创建一个对象不只是简单调用其构造函数，还需要设置一些参数，可能还需要配置
     环境，如果将这些代码散落在每一个创建对象的客户类中，势必会出现代码重复、创建蔓延的问题，而这些客户类其实无须
     承担对象的创建工作，它们只需使用已创建好的对象就可以了。此时，可以引入工厂类来封装对象的创建逻辑和客户代码的
     实例化/配置选项。
  3. 使用工厂类还有一个“不是特别明显的”优点，一个类可能拥有多个构造函数，而在Java、C#等语言中构造函数名字都与类名
     相同，客户端只能通过传入不同的参数来调用不同的构造函数创建对象，从构造函数和参数列表中也许大家根本不了解不同
     构造函数所构造的产品的差异。但如果将对象的创建过程封装在工厂类中，我们可以提供一系列名字完全不同的工厂方法，
     每一个工厂方法对应一个构造函数，客户端可以以一种更加可读、易懂的方式来创建对象，而且，从一组工厂方法中选择一个
     意义明确的工厂方法，比从一组名称相同参数不同的构造函数中选择一个构造函数要方便很多。
     例如：矩形工厂类RectangleFactory提供了两个工厂方法createRectangle()和createSquare()，一个用于创建长方形，
     一个用于创建正方形，这两个方法比直接通过构造函数来创建长方形或正方形对象意义更加明确，也在一定程度上降低了
     客户端调用时出错的概率。
