::使用概述
  Java 反射API实际上定义了一种相对于编译时刻而言更加松散的契约。如果被调用的Java对象中并不包含某个方法，而在调用者代码中
  进行引用的话，在编译时刻就会出现错误。而反射API则可以把这样的检查推迟到运行时刻来完成。通过把Java中的字节代码增强、
  类加载器和反射API结合起来，可以处理一些对灵 活性要求很高的场景。
  在有些情况下，可能会需要从远端加载一个Java类来执行。比如一个客户端Java程序可以通过网络从服务器端下载Java类来执行，
  从而可以实现自动更新 的机制。当代码逻辑需要更新的时候，只需要部署一个新的Java类到服务器端即可。一般的做法是通过
  自定义类加载器下载了类字节代码之后，定义出 Class类的对象，再通过newInstance方法就可以创建出实例了。不过这种做法要求客户端
  和服务器端都具有某个接口的定义，从服务器端下载的是 这个接口的实现。这样的话才能在客户端进行所需的类型转换，并通过接口来
  使用这个对象实例。如果希望客户端和服务器端采用更加松散的契约的话，使用反射API就可以了。两者之间的契约只需要在方法的名称和
  参数这个级别就足够了。服务器端Java类并不需要实现特定的接口，可以是一般的Java类。
  
  http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html
    1. 通过一个对象获得完整的包名和类名
    2. 实例化Class类对象
    3. 通过Class实例化其他类的对象

::类加载
  http://www.cnblogs.com/lijunamneg/archive/2013/03/25/2980991.html

::动态代理
  http://blog.csdn.net/cjl5678/article/details/10586645
  https://www.zhihu.com/question/20794107
    
