::为什么要使用内部类
  因为每个内部类都能独立地implement一个接口，使多重继承的解决方案更加完整
  
  内部类出现的情况大致分为
  
  1. 成员内部类
    最普通常见的，可无限制访问外围类，这种内部类不能有static变量和方法，因为时依附于外部类的。只有先创建了外部类才能创建内部类
        
  2. 局部内部类
    它是嵌套在方法和作用域内的(可能时定义在方法里，比如
        public class Parcel5 {
            public Destionation destionation(String str){
                class PDestionation implements Destionation{
                    private String label;
                    private PDestionation(String whereTo){
                        label = whereTo;
                    }
                    public String readLabel(){
                        return label;
                    }
                }
                return new PDestionation(str);
            }

            public static void main(String[] args) {
                Parcel5 parcel5 = new Parcel5();
                Destionation d = parcel5.destionation("chenssy");
            }
        }
    也可能是定义在某个代码块里，比如)
    public class Parcel6 {
        private void internalTracking(boolean b){
            if(b){
                class TrackingSlip{
                    private String id;
                    TrackingSlip(String s) {
                        id = s;
                    }
                    String getSlip(){
                        return id;
                    }
                }
                TrackingSlip ts = new TrackingSlip("chenssy");
                String string = ts.getSlip();
            }
        }

        public void track(){
            internalTracking(true);
        }

        public static void main(String[] args) {
            Parcel6 parcel6 = new Parcel6();
            parcel6.track();
        }
    }
    通常用于解决比较复杂的问题，需要创建一个类来辅助解决，但又不希望这个类是可共用的时候
    
3. 匿名内部类
   比如常见的 setOnClickListener(new OnClickListener(){})
   
4. 静态内部类
  
